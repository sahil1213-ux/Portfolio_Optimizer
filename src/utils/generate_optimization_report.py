from datetime import datetime
from pathlib import Path
from reportlab.lib.pagesizes import letter
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, Image, PageBreak
from reportlab.lib.units import inch
from reportlab.lib import colors



def generate_optimization_report(
    output_dir: Path,
    results: dict,
    efficient_frontier_path: Path,
    allocation_path: Path
) -> Path:
    """Generate PDF report for portfolio optimization."""
    pdf_path = output_dir / "optimization_report.pdf"
    doc = SimpleDocTemplate(str(pdf_path), pagesize=letter)
    styles = getSampleStyleSheet()
    
    story = []
    
    # Title page
    story.append(Paragraph("Portfolio Optimization Report", styles['Title']))
    story.append(Spacer(1, 0.2*inch))
    
    # Report metadata
    meta_table = [
        ["Date Generated:", datetime.now().strftime("%Y-%m-%d %H:%M")],
        ["Tickers:", ", ".join(results['tickers'])],
        ["Investment Amount:", f"${results['amount']:,.2f}"],
        ["Analysis Period:", results['period']],
        ["Risk-Free Rate:", f"{results['risk_free_rate']:.2%}"],
    ]
    
    if 'max_weight' in results:
        meta_table.append(["Max Weight Constraint:", f"{results['max_weight']:.0%}"])
    if 'min_stocks' in results:
        meta_table.append(["Min Stocks Constraint:", str(results['min_stocks'])])
    
    story.append(Table(meta_table, colWidths=[2*inch, 3*inch]))
    story.append(Spacer(1, 0.3*inch))
    story.append(PageBreak())
    
    # Performance Summary
    story.append(Paragraph("Performance Summary", styles['Heading1']))
    story.append(Spacer(1, 0.1*inch))
    
    metrics_data = [
        ["Metric", "Value", "Description"],
        [
            "Expected Return", 
            f"{results['tangency']['return']:.2%}", 
            "Annualized portfolio return"
        ],
        [
            "Volatility", 
            f"{results['tangency']['volatility']:.2%}", 
            "Annualized portfolio risk"
        ],
        [
            "Sharpe Ratio", 
            f"{results['tangency']['sharpe']:.2f}", 
            "Risk-adjusted return (Higher is better)"
        ]
    ]
    
    metrics_table = Table(
        metrics_data, 
        colWidths=[1.5*inch, 1*inch, 3*inch],
        style=[
            ('BACKGROUND', (0,0), (-1,0), colors.lightgrey),
            ('GRID', (0,0), (-1,-1), 1, colors.black),
            ('VALIGN', (0,0), (-1,-1), 'TOP'),
            ('ALIGN', (1,0), (1,-1), 'CENTER')
        ]
    )
    story.append(metrics_table)
    story.append(Spacer(1, 0.3*inch))
    
    # Allocation table
    story.append(Paragraph("Portfolio Allocation", styles['Heading2']))
    story.append(Spacer(1, 0.1*inch))
    
    alloc_data = [["Ticker", "Weight", "Amount", "Expected Return"]]
    for ticker, weight in results['tangency']['weights'].items():
        ticker_return = results.get('annual_returns', {}).get(ticker, 'N/A')
        if isinstance(ticker_return, float):
            ticker_return = f"{ticker_return:.2%}"
            
        alloc_data.append([
            ticker,
            f"{weight:.2%}",
            f"${results['amount'] * weight:,.2f}",
            ticker_return
        ])
    
    alloc_table = Table(
        alloc_data, 
        colWidths=[1*inch, 1*inch, 1.5*inch, 1.5*inch],
        style=[
            ('BACKGROUND', (0,0), (-1,0), colors.lightgrey),
            ('GRID', (0,0), (-1,-1), 1, colors.black),
            ('ALIGN', (1,1), (-1,-1), 'RIGHT')
        ]
    )
    story.append(alloc_table)
    story.append(Spacer(1, 0.3*inch))
    
    # Efficient Frontier Plot
    story.append(Paragraph("Efficient Frontier", styles['Heading2']))
    story.append(Spacer(1, 0.1*inch))
    story.append(Image(str(efficient_frontier_path), width=6*inch, height=4*inch))
    story.append(Paragraph(
        "Figure 1: Portfolio optimization results showing efficient frontier and optimal portfolios",
        styles['Italic']
    ))
    story.append(Spacer(1, 0.2*inch))
    
    # Allocation Plot
    story.append(Paragraph("Asset Allocation", styles['Heading2']))
    story.append(Spacer(1, 0.1*inch))
    story.append(Image(str(allocation_path), width=4*inch, height=4*inch))
    story.append(Paragraph(
        "Figure 2: Weight distribution across assets in optimal portfolio",
        styles['Italic']
    ))
    
    # Footer
    story.append(Spacer(1, 0.5*inch))
    story.append(Paragraph("Generated by Portfolio Optimizer", styles['Footer']))
    story.append(Paragraph(
        "Modern Portfolio Theory Implementation © 2023", 
        styles['Footer']
    ))
    
    # Build PDF
    doc.build(story)
    return pdf_path

def generate_backtest_report(
    output_dir: Path,
    results: dict,
    backtest_path: Path
) -> Path:
    """Generate PDF report for backtesting."""
    pdf_path = output_dir / "backtest_report.pdf"
    doc = SimpleDocTemplate(str(pdf_path), pagesize=letter)
    styles = getSampleStyleSheet()
    
    story = []
    
    # Title page
    story.append(Paragraph("Portfolio Backtest Report", styles['Title']))
    story.append(Spacer(1, 0.2*inch))
    
    # Backtest Performance Plot
    story.append(Paragraph("Backtest Performance", styles['Heading1']))
    story.append(Spacer(1, 0.1*inch))
    story.append(Image(str(backtest_path), width=6*inch, height=4*inch))
    story.append(Paragraph(
        "Figure 1: Historical performance of optimized portfolio vs benchmarks",
        styles['Italic']
    ))
    
    # Backtest Metrics
    story.append(Spacer(1, 0.2*inch))
    story.append(Paragraph("Backtest Metrics", styles['Heading2']))
    
    bt_data = [["Metric", "Portfolio"]]
    for bench, value in results['benchmarks'].items():
        bt_data[0].append(bench)
        bt_data.append([
            "CAGR",
            f"{results.get('CAGR', 'N/A'):.2%}",
            f"{value:.2%}"
        ])
    
    bt_data.append([
        "Sharpe Ratio",
        f"{results.get('Sharpe Ratio', 'N/A'):.2f}",
        "N/A"
    ])
    
    bt_data.append([
        "Max Drawdown",
        f"{results.get('Max Drawdown', 'N/A'):.2%}",
        "N/A"
    ])
    
    bt_table = Table(
        bt_data,
        style=[
            ('BACKGROUND', (0,0), (-1,0), colors.lightgrey),
            ('GRID', (0,0), (-1,-1), 1, colors.black)
        ]
    )
    story.append(bt_table)
    
    # Footer
    story.append(Spacer(1, 0.5*inch))
    story.append(Paragraph("Generated by Portfolio Optimizer", styles['Footer']))
    story.append(Paragraph(
        "Modern Portfolio Theory Implementation © 2023", 
        styles['Footer']
    ))
    
    # Build PDF
    doc.build(story)
    return pdf_path